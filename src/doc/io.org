* IO
** Memory mapped page file
   *NAT Framework* uses shared memory mapped files for communicating between core
   components of the system in real trading environment.
   Customized message format and protocol has been implemented.
   The implementation is bidirectional, asynchronous and suitable for both multi-process
   and multi-thread environments.

   Memory mapped file has lowest latency and highest throughput among popular methods
   for inter-process communication on a general purpose PC [fn::[[http://pages.cs.wisc.edu/~adityav/Evaluation_of_Inter_Process_Communication_Mechanisms.pdf]],
   especially for large blocks of data.
   The limitation imposed is that all components involved in the communication should be
   deployed in the same machine and the concern about leakage of trading messages to unauthorized user.
   The system has a well-designed account management that messages of different accounts will not mess up with each other.
   If the host machine is hacked with root privilege, then of course, everything will be leaked.
   Thus, only core components like *TDEngine*, *MDEngine* and *Strategy* use mmap file for internal communication.
   End user interaction will not take place in the host machine locally, but through a secure channel remotely.
   
   The other big advantage of using memory mapped file is that all messages, including the quotation data,
   are persistent on disk. The whole trading timeline can be reviewed or replayed offline.
   Other methods, like *pipe* and *shared memory*, may be suitable for communication but not for persistence.
   
   At last, the memory mapped files are also used for solely for sharing of data in the system like the order track collection.
   
   The implementation details of mmap pages is described [[file:~/src/nat_framework/src/io/note.org][*io* document]].
   
** System IO
   The system IO pages are managed as multi-process and multi-thread safe.
   There is only one system IO in a running system, which is a used as a central message bus
   for communication among components.
   
** Engine IO
*** *MDEngine*
  Each *MDEngine* manages its own IO pages corresponding the engine's name.
  This name (more precisely, the name's hash) must be unique in the running system,
  since it corresponds to the dedicated page file directory in the host machine.
  The name and its hash ID also acts as the identifier of this engine for communication with other components.
  
  *MDEngine* also fetch and response messages to it from the system IO, continuously while running.
  
  [[file:md_io.png][md_io.png]]
  
*** *TDEngine*
  [[file:td_io.png][td_io.png]] 
  
** Strategy IO
 *Strategy* uses *CMDHelperComm* and *CTDHelperComm* to
 communicate with *MDEngine* and *TDEngine* in real trading.
 
 [[file:strategy_io.png][strategy_io.png]]
 
** Order track pages
