
* DONE Use upstream code base, just use orignial
  CLOSED: [2021-12-07 Di 11:11]
<2020-03-09 Mo>
[[file:~/src/nat_framework/src/common/json.hpp::#include <algorithm> // all_of, copy, fill, find, for_each, none_of, remove, reverse, transform]]

* DONE libev.a link error, static or dynamic
  CLOSED: [2021-12-07 Di 11:12]
<2020-03-09 Mo>
[[file:~/src/nat_framework/src/make/head.mk::libev_DIR = $(BASEDIR)/ThirdParty/libev]]
** change libev.so.4.0.0 to libev.so
** only dynamic libev linkage allowed

* DONE deploy log4cplus headers as well??
  CLOSED: [2021-12-07 Di 11:12]
<2020-03-09 Mo>
[[file:~/src/nat_framework/src/makefile::# cp -r ThirdParty/log4cplus/include/* ../release/SDK/include]]

* TODO 'risk' has no test main function
<2020-03-09 Mo>
[[file:~/src/nat_framework/src/risk/makefile.bak::include ../make/make.inc]]

* DONE Figure out and setup the target for unused sources in /io/ package
  CLOSED: [2021-12-07 Di 11:14]
<2020-03-11 Mi>
[[file:~/src/nat_framework/NAT/src/io/note.org::*Unused sources][Unused sources]]

* DONE /libev/ alternative
  CLOSED: [2021-12-07 Di 11:14]
** /libev/ code base merged into nat code repo
** or replace with /libuv/ or /libevent/

* DONE Integration of three logging service in one library
  CLOSED: [2020-03-12 Do 10:49]
<2020-03-11 Mi>
[[file:~/src/nat_framework/NAT/Notes.org::*Logging system][Logging system]]

* TODO Understand CTimer design
<2020-03-12 Do>
[[file:~/src/nat_framework/NAT/Notes.org::*Time ( design of /CTimer/)][Time ( design of /CTimer/)]]

* DONE Figure out the sources not included in libio.a, but still used in other package
  CLOSED: [2020-03-12 Do 10:49]
<2020-03-12 Do>
[[file:~/src/nat_framework/NAT/src/io/note.org::*Sources used in other package][Sources used in other package]]

* TODO Dependnecy on libio not resolved
<2020-03-12 Do>
[[file:~/src/nat_framework/src/makefile::dump:]]

* TODO What's the meaning to keep 3 versions of EES
<2020-03-12 Do>
[[file:~/src/nat_framework/NAT/src/td/note.org::*EES has three versions][EES has three versions]]

* TODO Better be private member function
<2020-03-12 Do>
[[file:~/src/nat_framework/src/td/ITDHelper.h::virtual void doSendOrder(int track_id) = 0;]]

* TODO CStrategy not used in the class
<2020-03-12 Do>
[[file:~/src/nat_framework/src/execute_model/CMarketStruct.h::#include "CStrategy.h"]]

* TODO Python Helper Design
<2020-03-13 Fr>
[[file:~/src/nat_framework/NAT/src/td/note.org::*Helper][Helper]]

* DONE The policy is not working
  CLOSED: [2021-12-07 Di 11:15]
<2020-03-21 Sa>
[[file:~/src/nat_framework/src/external/log4cplus/CMakeLists.txt::# Add subdirectory and alias target]]

* DONE Add namespace or not ?
  CLOSED: [2021-12-07 Di 11:16]
<2020-03-21 Sa>
[[file:~/src/nat_framework/src/external/log4cplus/CMakeLists.txt::# add_library(log4cplus::log4cplus ALIAS log4cplus)]]

* DONE Use namespace or not?
  CLOSED: [2021-12-07 Di 11:16]
<2020-03-21 Sa>
[[file:~/src/nat_framework/src/external/libev/CMakeLists.txt::# add_library(libev::libev ALIAS libev)]]

* TODO How to install PUBLIC or INTERFACE target_soueces?
<2020-03-27 Fr>
[[file:~/src/nat_framework/src/common/CMakeLists.txt::PUBLIC "ATSysUtils.h"]]

* DONE Correct path format?
  CLOSED: [2021-12-07 Di 11:18]
<2020-03-29 So>
[[file:~/src/nat_framework/src/include/SysConf.h::#define IO_SYSTEM_MSG_PATH IO_SYSTEM_MSG_DIR "msg"]]

* DONE Deploy.sh unfinished
  CLOSED: [2021-12-07 Di 11:18]
<2020-03-29 So>
[[file:~/src/nat_framework/NAT/src/scripts/deploy.sh][file:~/src/nat_framework/src/scripts/deploy.sh]]

* TODO risk_svr.sh needed
<2020-03-29 So>
[[file:~/src/nat_framework/src/scripts/install_template.sh::echo "* * * * * /home/jarvis/TunnelAgent/scripts/check_alive.sh >> /home/jarvis/TunnelAgent/scripts/down.log 2>&1" ;]]

* TODO not yet copied to SDK
<2020-03-30 Mo>
[[file:~/src/nat_framework/src/tools/makefile::cp $@ ${BASEDIR}/../release/SDK/$@]]

* TODO What's the role of logdb?
<2020-03-31 Di>
[[file:~/src/nat_framework/src/logdb/makefile::LogDB.so: CLogDB.o CLogTable.o CPyLogTable.o CPyLogDB.o]]

* TODO What's the log directory?
<2020-04-25 Sa>
[[file:~/src/nat_framework/src/scripts/tools.sh.in::BASE=@CMAKE_INSTALL_PREFIX@/logdir/logs_${NEXTDAY}]]

* DONE Is this correct macro format??
  CLOSED: [2021-12-07 Di 11:20]
<2020-04-25 Sa>
[[file:~/src/nat_framework/install/include/SysConf.h::#define IO_SYSTEM_MSG_PATH IO_SYSTEM_MSG_DIR "msg"]]

* DONE What's usage of 'myid_8b'
  CLOSED: [2021-12-07 Di 11:20]
<2020-04-26 So>
[[file:~/src/nat_framework/src/td/conf/tdengine_offhour.json.in::"myid_8b" : "miaosibo"]]

 This is the id string of the trading program to be registered to the broker front.
 
* DONE Does this mean that td engine should start before md engine?
  CLOSED: [2021-12-07 Di 11:21]
<2020-05-18 Mo>
[[file:~/src/nat_framework/src/md/IMDEngine.cpp::// Get base information by td engine name]]

  Yes, td should be started first to get a list of trading instruments.
  
* TODO pf_all is not properly closed before the end of the process
<2021-12-07 Di>
[[file:~/src/nat_framework/src/dump/FileMgr.cpp::FILE* FileMgr::pf_all = nullptr;]]
<2021-12-07 Di>
[[file:~/src/nat_framework/src/dump/FileMgr.cpp::bool FileMgr::release()]]

* TODO Check the correct version number of CTP: v6.3.8 or v6.3.19
<2021-12-07 Di>
[[file:~/src/nat_framework/src/dump/FileMgr.cpp::const UnitedMarketDataType UMD_TYPE = UnitedMarketDataType::CTP_v638;]]
[[file:~/src/nat_framework/src/include/Constant.h::CTP_v638=101,]]

* TODO protected abstract method, but not used by the interface
<2021-12-08 Mi>
[[file:~/src/nat_framework/src/md/IMDEngine.h::virtual void join() = 0; // ?? TODO not used in the source code]]

* TODO Find out the usage of this callback function
<2021-12-08 Mi>
[[file:~/src/nat_framework/src/common/CTradeBaseInfo.h::static switchday_fn switch_day_cb_;]]

* TODO Why only save one ask/bid price, while 5 prices exist and data structure also keeps the place for these prices
<2021-12-08 Mi>
[[file:~/src/nat_framework/src/md/CMDEngineCtp.cpp::p.avg_px = p_data->AveragePrice;]]

* TODO Where should the trading flow started?
<2021-12-08 Mi>
[[file:~/src/nat_framework/src/td/CTDEngineCtp.cpp::unit.api->SubscribePublicTopic(THOST_TERT_QUICK); // need check]]

* TODO Settlement is confirmed without checking first, is it good for trading account?
<2021-12-08 Mi>
[[file:~/src/nat_framework/src/td/CTDEngineCtp.cpp::// confirm settlement without checking first!!]]

* TODO Should argument 'size' be a reference?
<2021-12-08 Mi>
[[file:~/src/nat_framework/src/io/CIOBase.h::size = size_;]]

* TODO Both load and createNextPage are only used by CRawIOWriter itself, so consider change them to private. They are not the interface of the class.
<2021-12-08 Mi>
[[file:~/src/nat_framework/src/io/CRawIOWriter.h::// overwrites CIOBase::load]]

* TODO Why manually set a new sec_diff_??
<2021-12-09 Do>
[[file:~/src/nat_framework/src/utility/CTimer.cpp::void CTimer::setTime(long now_nano)]]

* TODO Why substract 1933008 seconds?
<2021-12-09 Do>
[[file:~/src/nat_framework/src/utility/utils.h::{return clock\[0\] * 36000 + clock\[1\] * 3600 + clock\[3\] * 600 + clock\[4\] * 60 + clock\[6\] * 10 + clock\[7\] - 1933008;}]]

* TODO Why subtract one day for night time ?
<2021-12-09 Do>
[[file:~/src/nat_framework/src/md/CMDEngineCtp.cpp::else {if(p_data->UpdateTime\[0\] == '2') p.exch_time -= 86400L * 1000000000L;}]]

* TODO Why assign to the returned order status?
<2021-12-09 Do>
[[file:~/src/nat_framework/src/td/CTDEngineCtp.cpp::pOrder->OrderStatus = ODS(TDSEND); // TBU]]

* TODO Write conflict in multi-process environment                      :BUG:
  Considering the following scenario using CSystemIO:
  At one time point, the latest page is almost full, and two pocesses try to write some data into it and one process
  tries to read the latest data from it. The cursor of the reading process points to the end of the
  last frame in the latest page.
  1. The first process locks it first, and tries to write a large datagram
     which exceeds this page's remaining capacity. Thus, a new page is created and the datagram is
     written to that page instead. The process now regards this new page as its latest page for
     writing afterwards, while it will change the status of the old latest page to PAGE_STATUS_FINISH
     and write the stop timestamp in the page header.
  2. Now, the reading process will read the latest frame. It finds the old latest page is full and
     labeled finished, so it loads the next page and read the latest frame written by the first process.
     The reading process's cursor now also points to the new latest page.
  3. Finally, the third process, which still loads the old latest page, tries to write a small datagram.
     The size of this datagram fits the remaining capacity of the old latest page, so it writes to
     it ([[file:src/io/CRawIOWriter.cpp][see the 'write' method in CRawIOWriter]]). The current 'write' implementation does not check
     status code of the page it tries to write, so it will keep writing the old latest page until no more
     space left and label the old page as finished and write the stop nano. (again!!, the first process
     has already determined the old page was full and written the finished status code and the stop nano).
     The frames between the two 'stop's are not and will not be seen by the reading process. This may be
     a serious bug, since some information is lost in the communication and not processed.

  Proposed solution:
  The 'write' method should respect the status code in the page file.
  Instead of checking the remaining space alone, check both the capacity and the status code of the page
  it aims to write to. If the page is full, the new page should be loaded even there is still space left
  in the old page.
<2021-12-10 Fr>
[[file:~/src/nat_framework/src/io/CRawIOWriter.cpp::bool CRawIOWriter::write(const void* data, uint32_t len) {]]

* TODO Why write the start engine message at such a late time           :BUG:
  Definitely behind the trade base info, indefinitely may also behind some tick data (since subscription to
  pre-subscribed instruments happens before this writing this message).
<2021-12-10 Fr>
[[file:~/src/nat_framework/src/md/IMDEngine.cpp::writeStartSignal(); // write md_start message to md io]]

* TODO No matching 'commit' to 'prefetch', this will block the td io!!  :BUG:
<2021-12-10 Fr>
[[file:~/src/nat_framework/src/td/ITDEngine.cpp::tIOrderRtn *p = (tIOrderRtn *)writer_.prefetch(sizeof(tIOrderRtn));]]

* TODO What about NotTradeNotQueueing
<2021-12-10 Fr>
[[file:~/src/nat_framework/src/td/CTDEngineCtp.cpp::case THOST_FTDC_OST_PartTradedNotQueueing:]]

* TODO What's function?
<2021-12-11 Sa>
[[file:~/src/nat_framework/src/td/ITDEngine.h::bool testOtId(int otid, long long mid) {]]

* TODO Why bother to seek IO_TD_START command? If the helper init successfully, it's guanranteed that TD engine is already started
  For td restart??
<2021-12-11 Sa>
[[file:~/src/nat_framework/src/td/CTDHelperComm.cpp::} else if (p->cmd == IO_TD_START) {]]

